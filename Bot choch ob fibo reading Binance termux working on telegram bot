import telebot
from binance.client import Client
import pandas as pd
import numpy as np
import time
import talib
from datetime import datetime

# Initialize
bot_token = '7970489926:AAGjDmazd_EXkdT1cv8Lh8aNGZ1hPlkbcJg'
channel_id = '@tradegrh'
api_key = 'cVRnAxc6nrVHQ6sbaAQNcrznHhOO7PcVZYlsES8Y75r34VJbYjQDfUTNcC8T2Fct'
api_secret = 'GEYh2ck82RcaDTaHjbLafYWBLqkAMw90plNSkfmhrvVbAFcowBxcst4L3u0hBLfC'  # Add your Binance API secret here

bot = telebot.TeleBot(bot_token)
client = Client(api_key, api_secret)

# Strategy Parameters
SYMBOL = 'BTCUSDT'
TIMEFRAME = Client.KLINE_INTERVAL_1MINUTE
RSI_PERIOD = 14
FIB_LEVELS = [0.236, 0.382, 0.5, 0.618, 0.786]
RISK_REWARD_RATIO = 2.5  # 1:2.5 risk:reward
MAX_RISK_PER_TRADE = 0.02  # 2% of capital

def calculate_fib_levels(df):
    high = df['high'].max()
    low = df['low'].min()
    diff = high - low
    return {
        '0.236': high - diff * 0.236,
        '0.382': high - diff * 0.382,
        '0.5': high - diff * 0.5,
        '0.618': high - diff * 0.618,
        '0.786': high - diff * 0.786
    }

def detect_choch(df):
    # CHOCH detection logic
    df['prev_high'] = df['high'].shift(1)
    df['prev_low'] = df['low'].shift(1)
    
    bearish_choch = (df['high'] > df['prev_high']) & (df['close'] < df['prev_low'])
    bullish_choch = (df['low'] < df['prev_low']) & (df['close'] > df['prev_high'])
    
    return bullish_choch.iloc[-1], bearish_choch.iloc[-1]

def analyze_order_book():
    order_book = client.get_order_book(symbol=SYMBOL)
    bids = pd.DataFrame(order_book['bids'], columns=['price', 'quantity'], dtype=float)
    asks = pd.DataFrame(order_book['asks'], columns=['price', 'quantity'], dtype=float)
    
    # Calculate order book imbalance
    total_bid = bids['quantity'].sum()
    total_ask = asks['quantity'].sum()
    ob_imbalance = (total_bid - total_ask) / (total_bid + total_ask)
    
    return ob_imbalance, bids, asks

def generate_signal():
    # Get historical data
    klines = client.get_klines(symbol=SYMBOL, interval=TIMEFRAME, limit=100)
    df = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 
                                      'close_time', 'quote_asset_volume', 'trades', 
                                      'taker_buy_base', 'taker_buy_quote', 'ignore'])
    df = df.astype({'open': float, 'high': float, 'low': float, 'close': float, 'volume': float})
    
    # Calculate indicators
    df['rsi'] = talib.RSI(df['close'], timeperiod=RSI_PERIOD)
    fib_levels = calculate_fib_levels(df)
    bullish_choch, bearish_choch = detect_choch(df)
    ob_imbalance, bids, asks = analyze_order_book()
    
    current_price = float(client.get_symbol_ticker(symbol=SYMBOL)['price'])
    last_close = df['close'].iloc[-1]
    
    # Signal generation logic
    signal = None
    entry = None
    stop_loss = None
    take_profit = None
    
    # Bullish conditions
    if (bullish_choch and ob_imbalance > 0.2 and df['rsi'].iloc[-1] < 45 and 
        current_price > fib_levels['0.618']):
        signal = 'BUY'
        entry = current_price
        stop_loss = min(fib_levels['0.786'], df['low'].iloc[-1])
        take_profit = entry + (entry - stop_loss) * RISK_REWARD_RATIO
    
    # Bearish conditions
    elif (bearish_choch and ob_imbalance < -0.2 and df['rsi'].iloc[-1] > 55 and 
          current_price < fib_levels['0.382']):
        signal = 'SELL'
        entry = current_price
        stop_loss = max(fib_levels['0.236'], df['high'].iloc[-1])
        take_profit = entry - (stop_loss - entry) * RISK_REWARD_RATIO
    
    return signal, entry, stop_loss, take_profit, fib_levels, ob_imbalance

def format_signal(signal, entry, stop_loss, take_profit, fib_levels, ob_imbalance):
    if not signal:
        return None
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    price = float(client.get_symbol_ticker(symbol=SYMBOL)['price'])
    
    message = f"""
🚀 *{signal} SIGNAL DETECTED* 🚀
📊 *Pair*: {SYMBOL}
⏰ *Time*: {current_time}
💰 *Current Price*: {price:.2f}

🎯 *Entry Zone*: {entry:.2f}
🛑 *Stop Loss*: {stop_loss:.2f}
🎯 *Take Profit*: {take_profit:.2f}

📊 *Risk/Reward*: 1:{RISK_REWARD_RATIO}
💼 *Risk per Trade*: {MAX_RISK_PER_TRADE*100}% of capital

📈 *Fibonacci Levels*:
    - 0.236: {fib_levels['0.236']:.2f}
    - 0.382: {fib_levels['0.382']:.2f}
    - 0.5: {fib_levels['0.5']:.2f}
    - 0.618: {fib_levels['0.618']:.2f}
    - 0.786: {fib_levels['0.786']:.2f}

📊 *Order Book Imbalance*: {ob_imbalance:.2%}

💡 *Trade Example*:
   - If you risk $100 (2% of $5000 account)
   - Position size: ${100/((abs(entry-stop_loss)/entry)):.2f} worth of BTC
   - Potential profit: ${100*RISK_REWARD_RATIO:.2f}
   - Potential loss: $100

⚡ *Action*: Manually execute this trade on Binance
"""
    return message

@bot.message_handler(commands=['startsearching'])
def start_searching(message):
    while True:
        signal, entry, stop_loss, take_profit, fib_levels, ob_imbalance = generate_signal()
        if signal:
            formatted_message = format_signal(signal, entry, stop_loss, take_profit, fib_levels, ob_imbalance)
            bot.send_message(channel_id, formatted_message, parse_mode='Markdown')
            break
        time.sleep(60)  # Check every minute

if __name__ == '__main__':
    print("Bot is running...")
    bot.polling()
